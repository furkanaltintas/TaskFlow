// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entitites.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "873b7636-0ffc-484b-a1c0-aebbe2ec586f",
                            Description = "Administrator with full permissions",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "884bae14-7164-417d-b322-425ae0ffae8f",
                            Description = "Role with supervisory access",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "7bcfc3d1-62a6-4949-aeed-60aa9343e9b6",
                            Description = "Role for support team members",
                            Name = "Support Specialist",
                            NormalizedName = "SUPPORT SPECIALIST"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "07724dfc-4884-4696-af54-f29cec9eb673",
                            Description = "General user role",
                            Name = "End User",
                            NormalizedName = "END USER"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "3e241c6c-4cfa-4e6e-aa5b-031def34fd45",
                            Description = "Role for managers",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "5c3dcf08-8d15-49c2-8895-90543b2f8f4a",
                            Description = "Role for team leaders",
                            Name = "Team Lead",
                            NormalizedName = "TEAM LEAD"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "8e054ebe-ff80-43cf-82df-d89ffa506018",
                            Description = "Role for technical staff",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "ad7a6a20-c489-453b-ace6-ab27a78cc9bc",
                            Description = "Role for customers",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = "06cd97ea-c4ec-47c3-b6b6-e4c2894ad6b6",
                            Description = "Role for HR department",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "4c189cab-3558-497d-a3f9-235016ddeb47",
                            Description = "Role for IT support staff",
                            Name = "IT Support",
                            NormalizedName = "IT SUPPORT"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.AppTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedUnitId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TaskCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RelatedUnitId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("AppTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kullanıcılar iletişim formunu doldurduktan sonra hata mesajı alıyor.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 1,
                            RelatedUnitId = 1,
                            RequestTypeId = 1,
                            TaskCode = "#BT-250723001",
                            TaskStatusId = 1,
                            Title = "Web sitesinde iletişim formu çalışmıyor",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ayşe Yılmaz adına bir e-posta adresi tanımlanması gerekiyor.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 2,
                            RelatedUnitId = 3,
                            RequestTypeId = 3,
                            TaskCode = "#BT-250723002",
                            TaskStatusId = 1,
                            Title = "Yeni çalışan için e-posta hesabı oluşturulması",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kayıt güncelleme işlemi sırasında sistem hata veriyor.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 2,
                            RelatedUnitId = 2,
                            RequestTypeId = 2,
                            TaskCode = "#BT-250723003",
                            TaskStatusId = 1,
                            Title = "XRM sisteminde kayıt güncellenemiyor",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Depo personeli için barkod okuyucu satın alınmalı.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 3,
                            RelatedUnitId = 3,
                            RequestTypeId = 3,
                            TaskCode = "#BT-250723004",
                            TaskStatusId = 1,
                            Title = "Yeni barkod okuyucu satın alma talebi",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rapor alım ekranında Excel seçeneği çalışmıyor",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 3,
                            RelatedUnitId = 4,
                            RequestTypeId = 1,
                            TaskCode = "#BT-250723005",
                            TaskStatusId = 1,
                            Title = "Satış raporları excel formatında alınamıyor",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mehmet Demir'e XRM sistemi görüntüleme yetkisi verilmeli.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 2,
                            RelatedUnitId = 2,
                            RequestTypeId = 2,
                            TaskCode = "#BT-250723006",
                            TaskStatusId = 1,
                            Title = "Kullanıcı erişim yetkisi tanımlama",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yeni tasarım sonrası bazı bölümler okunamıyor.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 1,
                            RelatedUnitId = 4,
                            RequestTypeId = 1,
                            TaskCode = "#BT-250723007",
                            TaskStatusId = 1,
                            Title = "Web sitesi renk uyumsuzluğu",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Satış ekibi panele erişmekte zorluk yaşıyor, performans çok düşük.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 3,
                            RelatedUnitId = 4,
                            RequestTypeId = 1,
                            TaskCode = "#BT-250723008",
                            TaskStatusId = 1,
                            Title = "Satış paneli yavaş çalışıyor",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yeni alınan donanımlar sisteme işlenmeli.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 2,
                            RelatedUnitId = 3,
                            RequestTypeId = 2,
                            TaskCode = "#BT-250723009",
                            TaskStatusId = 1,
                            Title = "Donanım envanter listesi güncelleme",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Satış personeline XRM eğitimi verilmesi talep ediliyor.",
                            IsCompleted = false,
                            IsDeleted = false,
                            PriorityId = 1,
                            RelatedUnitId = 2,
                            RequestTypeId = 2,
                            TaskCode = "#BT-250723010",
                            TaskStatusId = 1,
                            Title = "XRM kullanıcıları için eğitim talebi",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entitites.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12345678",
                            Email = "ahmet.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "AHMET.YILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEK4YxFVcXBI/oV6l6eb1LQeQdbktEWBfiQfzXM/nYzLMKv+l/1Z2GuWOJYhdppXIjA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "sample-refresh-token",
                            RefreshTokenExpires = new DateTime(2025, 5, 9, 23, 36, 30, 810, DateTimeKind.Utc).AddTicks(4664),
                            SecurityStamp = "cbb55583-cde5-4bd3-97b6-dae8d615eed4",
                            TwoFactorEnabled = false,
                            UserName = "ahmet.yilmaz"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AppTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Domain.Entitites.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Priorities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Definition = "High"
                        },
                        new
                        {
                            Id = 2,
                            Definition = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Definition = "Low"
                        },
                        new
                        {
                            Id = 4,
                            Definition = "Urgent"
                        },
                        new
                        {
                            Id = 5,
                            Definition = "Critical"
                        },
                        new
                        {
                            Id = 6,
                            Definition = "Normal"
                        },
                        new
                        {
                            Id = 7,
                            Definition = "Very High"
                        },
                        new
                        {
                            Id = 8,
                            Definition = "Low-Moderate"
                        },
                        new
                        {
                            Id = 9,
                            Definition = "Backlog"
                        },
                        new
                        {
                            Id = 10,
                            Definition = "Emergency"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.RelatedUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RelatedUnits", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Web"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "XRM"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Donanım"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Satış"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Finans"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Operasyon"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Pazarlama"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Müşteri Destek"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Arıza"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Hizmet Talebi"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Problem"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Değişiklik Talebi"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Maintenance"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Complaint"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Bug"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Feature Request"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Inquiry"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Support"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.TaskAssigmentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppTaskId")
                        .HasColumnType("int");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClosedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId")
                        .IsUnique();

                    b.ToTable("TaskAssigmentInfos");
                });

            modelBuilder.Entity("Domain.Entitites.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppTaskId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId");

                    b.ToTable("TaskComments");
                });

            modelBuilder.Entity("Domain.Entitites.TaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChagedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("Domain.Entitites.TaskMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppTaskId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId")
                        .IsUnique();

                    b.ToTable("TaskMedias");
                });

            modelBuilder.Entity("Domain.Entitites.TaskRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId");

                    b.ToTable("TaskRatings");
                });

            modelBuilder.Entity("Domain.Entitites.TaskReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId");

                    b.ToTable("TaskReports");
                });

            modelBuilder.Entity("Domain.Entitites.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AppTaskStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "New",
                            IsDeleted = false,
                            Name = "Yeni"
                        },
                        new
                        {
                            Id = 2,
                            Description = "In Progress",
                            IsDeleted = false,
                            Name = "Devam Ediyor"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Completed",
                            IsDeleted = false,
                            Name = "Tamamlandı"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Closed",
                            IsDeleted = false,
                            Name = "Kapatıldı"
                        },
                        new
                        {
                            Id = 5,
                            Description = "On Hold",
                            IsDeleted = false,
                            Name = "Beklemede"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Cancelled",
                            IsDeleted = false,
                            Name = "İptal Edildi"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Reopened",
                            IsDeleted = false,
                            Name = "Tekrar Açıldı"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Awaiting Approval",
                            IsDeleted = false,
                            Name = "Onay Bekliyor"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Under Investigation",
                            IsDeleted = false,
                            Name = "İnceleniyor"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Pending",
                            IsDeleted = false,
                            Name = "Beklemede"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<int>");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entitites.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("AppUserRole");
                });

            modelBuilder.Entity("Domain.Entitites.AppTask", b =>
                {
                    b.HasOne("Domain.Entitites.Priority", "Priority")
                        .WithMany("Tasks")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.RelatedUnit", "RelatedUnit")
                        .WithMany()
                        .HasForeignKey("RelatedUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.TaskStatus", "TaskStatus")
                        .WithMany("AppTasks")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.AppUser", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Priority");

                    b.Navigation("RelatedUnit");

                    b.Navigation("RequestType");

                    b.Navigation("TaskStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitites.AuditLog", b =>
                {
                    b.HasOne("Domain.Entitites.AppTask", "AppTask")
                        .WithMany()
                        .HasForeignKey("AppTaskId");

                    b.Navigation("AppTask");
                });

            modelBuilder.Entity("Domain.Entitites.TaskAssigmentInfo", b =>
                {
                    b.HasOne("Domain.Entitites.AppTask", "AppTask")
                        .WithOne("AssigmentInfo")
                        .HasForeignKey("Domain.Entitites.TaskAssigmentInfo", "AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppTask");
                });

            modelBuilder.Entity("Domain.Entitites.TaskComment", b =>
                {
                    b.HasOne("Domain.Entitites.AppTask", "AppTask")
                        .WithMany()
                        .HasForeignKey("AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppTask");
                });

            modelBuilder.Entity("Domain.Entitites.TaskHistory", b =>
                {
                    b.HasOne("Domain.Entitites.AppTask", "AppTask")
                        .WithMany()
                        .HasForeignKey("AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppTask");
                });

            modelBuilder.Entity("Domain.Entitites.TaskMedia", b =>
                {
                    b.HasOne("Domain.Entitites.AppTask", "AppTask")
                        .WithOne("TaskMedia")
                        .HasForeignKey("Domain.Entitites.TaskMedia", "AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppTask");
                });

            modelBuilder.Entity("Domain.Entitites.TaskRating", b =>
                {
                    b.HasOne("Domain.Entitites.AppTask", "AppTask")
                        .WithMany("TaskRatings")
                        .HasForeignKey("AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppTask");
                });

            modelBuilder.Entity("Domain.Entitites.TaskReport", b =>
                {
                    b.HasOne("Domain.Entitites.AppTask", "AppTask")
                        .WithMany("TaskReports")
                        .HasForeignKey("AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppTask");
                });

            modelBuilder.Entity("Domain.Entitites.AppUserRole", b =>
                {
                    b.HasOne("Domain.Entitites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.AppTask", b =>
                {
                    b.Navigation("AssigmentInfo");

                    b.Navigation("TaskMedia");

                    b.Navigation("TaskRatings");

                    b.Navigation("TaskReports");
                });

            modelBuilder.Entity("Domain.Entitites.AppUser", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entitites.Priority", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entitites.TaskStatus", b =>
                {
                    b.Navigation("AppTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
